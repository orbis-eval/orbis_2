variables:
  coverage_path: "./coverage.xml"
  APPLICATION_NAME: orbis2

  DOCKER_IMAGE: registry.gitlab.semanticlab.net/fhgr/future-of-work/$CI_PROJECT_NAME
  HELM_CHART_NAME_FHGR: chart
  TEST_URL_FHGR: preview.semanticlab.net
  URL_FHGR: prod.semanticlab.net
  VERSION: "1.0"

stages:
    - Pre Static Analysis
    - Test
    - Post Static Analysis
    - Docker Build
    - Kubernetes Deployment Test
    - Kubernetes Deployment Production

pep8:
  image: "python:3.8"
  stage: Pre Static Analysis
  script:
    - pip install tox
    - pip install tox-pip-version
    - tox -e pep8
  tags:
    - docker
  allow_failure: true


pytest:
  image: "python:3.8"
  stage: Test
  services:
    - name: mongo:latest
  script:
    - pip install tox
    - pip install tox-pip-version
    - tox -e coverage
  tags:
    - docker
  artifacts:
    paths:
      - $coverage_path
  allow_failure: true


sonar:
  stage: Post Static Analysis
  dependencies:
    - pytest
  allow_failure: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  script:
    - sonar-scanner -h
    - sonar-scanner -D sonar.projectKey=futureofwork_orbis_2_webservice_AX8sGwtTzgg17GV5qrGE
                    -D sonar.language=py
                    -D sonar.host.url=$SONAR_HOST 
                    -D sonar.login=$SONAR_KEY 
                    -D sonar.python.coverage.reportPaths=$coverage_path
                    -D sonar.sources='src/'
                    -D sonar.exclusions='src/frontend/**'
    
  tags:
    - docker
  when: manual


docker:
  stage: Docker Build
  image:
    name: docker:latest
  script:
    - CI_VERSION="${VERSION}.${CI_PIPELINE_ID}"
    - echo building image $DOCKER_IMAGE
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build --no-cache -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE:latest
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE:$CI_VERSION
    - docker push $DOCKER_IMAGE:latest
    - docker push $DOCKER_IMAGE:$CI_VERSION
  tags:
  - mavendocker
  when: manual

fhgr-deploy-production-release:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Production
  script:
    - echo "Deploy to production cluster for namespace ${KUBE_NAMESPACE}"
    - export KUBE_NAMESPACE=orbis2
    - APPLICATION_NAME_APP=${APPLICATION_NAME}-app
    - CI_VERSION="${VERSION}.${CI_PIPELINE_ID}"
    - helm upgrade --install $APPLICATION_NAME_APP
      --kubeconfig $KUBECONFIG 
      --set gitlab.env=review/${CI_ENVIRONMENT_SLUG}
      --set gitlab.app=$CI_PROJECT_PATH_SLUG 
      --set image.repository=$DOCKER_IMAGE:$CI_VERSION
      --set env.MONGO_URL=${MONGO_URL}
      --namespace $KUBE_NAMESPACE
      --set appVersion=$CI_COMMIT_SHA ./$HELM_CHART_NAME_FHGR/app/
    - kubectl rollout restart deployment -n $KUBE_NAMESPACE $APPLICATION_NAME_APP
  environment:
    name: production
    url:  https://${APPLICATION_NAME_APP}.${URL_FHGR}/rest/status
    on_stop: fhgr-delete-production-release
    kubernetes:
      namespace: $KUBE_NAMESPACE
  only:
    - main
  tags:
    - mavendocker
  when: manual

fhgr-delete-production-release:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Production
  variables:
    GIT_STRATEGY: none
  script:
    - APPLICATION_NAME_APP=${APPLICATION_NAME}-app
    - echo "removing production deployment $APPLICATION_NAME_APP from cluster..."
    - helm --kubeconfig $KUBECONFIG delete $APPLICATION_NAME_APP
  environment:
    name: production
    action: stop
  only:
    - main
  tags:
    - docker
  when: manual

fhgr-deploy-production-db:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Production
  script:
    - echo "Deploy db to production cluster"
    - export KUBE_NAMESPACE=orbis2
    - APPLICATION_NAME_DB=${APPLICATION_NAME}
    - CI_VERSION="${VERSION}.${CI_PIPELINE_ID}"
    - helm upgrade --install 
      -f ./$HELM_CHART_NAME_FHGR/db/mongo_values.yaml
      --namespace $KUBE_NAMESPACE
      --kubeconfig $KUBECONFIG
      --set appVersion=$CI_COMMIT_SHA 
      $APPLICATION_NAME_DB https://charts.bitnami.com/bitnami/mongodb-12.1.26.tgz
    - kubectl rollout restart deployment -n $KUBE_NAMESPACE  $APPLICATION_NAME_DB
  environment:
    name: production
    url:  https://${APPLICATION_NAME_DB}.${URL_FHGR}/rest/status
    on_stop: fhgr-delete-production-release
    kubernetes:
      namespace: $KUBE_NAMESPACE
  only:
    - main
  tags:
    - mavendocker
  when: manual

fhgr-delete-production-db:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Production
  variables:
    GIT_STRATEGY: none
  script:
    - APPLICATION_NAME_DB=${APPLICATION_NAME}
    - echo "removing db production deployment $APPLICATION_NAME_DB from cluster..."
    - helm --kubeconfig $KUBECONFIG delete $APPLICATION_NAME_DB
  environment:
    name: production
    action: stop
  only:
    - main
  tags:
    - docker
  when: manual

fhgr-deploy-test-release:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Test
  script:
    - echo "Deploy to production cluster for namespace ${KUBE_NAMESPACE}"
    - export KUBE_NAMESPACE=orbis2
    - APPLICATION_NAME_APP=test-${APPLICATION_NAME}-app
    - CI_VERSION="${VERSION}.${CI_PIPELINE_ID}"
    - helm upgrade --install $APPLICATION_NAME_APP
      --kubeconfig $KUBECONFIG 
      --set gitlab.env=review/${CI_ENVIRONMENT_SLUG}
      --set gitlab.app=$CI_PROJECT_PATH_SLUG 
      --set image.repository=$DOCKER_IMAGE:$CI_VERSION
      --set env.MONGO_URL=${MONGO_TEST_URL}
      --namespace $KUBE_NAMESPACE
      --set appVersion=$CI_COMMIT_SHA ./$HELM_CHART_NAME_FHGR/test-app/
    - kubectl rollout restart deployment -n $KUBE_NAMESPACE $APPLICATION_NAME_APP
  environment:
    name: production
    url:  https://${APPLICATION_NAME_APP}.${TEST_URL_FHGR}/rest/status
    on_stop: fhgr-delete-production-release
    kubernetes:
      namespace: $KUBE_NAMESPACE
  except:
    - main
  tags:
    - mavendocker
  when: manual

fhgr-delete-test-release:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Test
  variables:
    GIT_STRATEGY: none
  script:
    - APPLICATION_NAME_APP=test-${APPLICATION_NAME}-app
    - echo "removing production deployment $APPLICATION_NAME_APP from cluster..."
    - helm --kubeconfig $KUBECONFIG delete $APPLICATION_NAME_APP
  environment:
    name: production
    action: stop
  except:
    - main
  tags:
    - docker
  when: manual

fhgr-deploy-test-db:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Test
  script:
    - echo "Deploy test db to prodction cluster"
    - export KUBE_NAMESPACE=orbis2
    - APPLICATION_NAME_DB=test-${APPLICATION_NAME}
    - CI_VERSION="${VERSION}.${CI_PIPELINE_ID}"
    - helm upgrade --install 
      -f ./$HELM_CHART_NAME_FHGR/test-db/mongo_values.yaml
      --namespace $KUBE_NAMESPACE
      --kubeconfig $KUBECONFIG
      --set appVersion=$CI_COMMIT_SHA 
      $APPLICATION_NAME_DB https://charts.bitnami.com/bitnami/mongodb-12.1.26.tgz
    - kubectl rollout restart deployment -n $KUBE_NAMESPACE  $APPLICATION_NAME_DB
  environment:
    name: production
    url:  https://${APPLICATION_NAME_DB}.${TEST_URL_FHGR}/rest/status
    on_stop: fhgr-delete-test-release
    kubernetes:
      namespace: $KUBE_NAMESPACE
  except:
    - main
  tags:
    - mavendocker
  when: manual

add-documents-to-test-db:
  image: "python:3.8"
  stage: Kubernetes Deployment Test
  script:
    - echo "Adding documents do test db"
  environment:
    name: "add-test-documents"
  except:
    - main
  when: manual

fhgr-delete-test-release-db:
  image: dtzar/helm-kubectl:latest
  stage: Kubernetes Deployment Test
  variables:
    GIT_STRATEGY: none
  script:
    - APPLICATION_NAME_DB=test-${APPLICATION_NAME}-db
    - echo "removing test db production deployment $APPLICATION_NAME_DB from cluster..."
    - helm --kubeconfig $KUBECONFIG delete $APPLICATION_NAME_DB
  environment:
    name: production
    action: stop
  except:
    - main
  tags:
    - docker
  when: manual

